// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let capacity = maxLength;
        if (capacity > 0) {
            let str = Array.new(capacity);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (capacity > 0) {
            do Memory.deAlloc(this);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length) { return str[j]; }
        return 0;
        
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < length) { let str[j] = c; }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) { let length = length - 1; }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, i;
        var boolean neg;
        let i = 0;
        let result = 0;
        let neg = false;

        if (str[0] = 45) {
            let neg = true;
            let i = 1;
        }

        while (i < length) {
            let result = result * 10 + (str[i] - 48); 
            let i = i + 1;
        }

        if (neg) {
            let result = -result;
        }

        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, tens, current;

        let i = 0;
        let tens = 10000;

        do str.dispose();
        let str = Array.new(6);
        let capacity = 6;

        if (val < 0) {
            let val = -val;
            let str[0] = 45;
            let i = 1;
        }

        while (tens > 0) {
            let current = val / tens;
            if (current > 0) {
                let str[i] = current + 48;
                let i = i + 1;
            }

            let val = val - (tens * current);
            let tens = tens / 10;
        }

        let length = i;

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
