// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int screenBase;
    static Array screen;

    // for bitwise operation in drawPixel
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screenBase = 16384;
        let screen = screenBase;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = 0;
            let i = i + 1;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        let address = 32 * y + (x / 16);
        let x = x - (16 * (x / 16));

        let screen[address] = Screen.mask(address, x, x);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int i, inext, j, dx, dy, diff;

        // if y2 < y1, flip the coordinates
        if (y2 < y1) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        // x1 = x2, vertical line
        if (x1 = x2) {
            do Screen.drawVertical(x1, y1, y2);
            // while (~(i > dy)) {
            //     do Screen.drawPixel(x1, y1 + i);
            //     let i = i + 1;
            // }
            return;
        }

        // y1 = y2, horizontal line
        if (y1 = y2) {
            if (x2 < x1) { do Screen.drawHorizontal(y1, x2, x1, 1); }
            else { do Screen.drawHorizontal(y1, x1, x2, 1); }
            // while (~(Math.abs(i) > dx)) {
            //     do Screen.drawPixel(x1 + i, y1);
            //     let i = i + inext;
            // }
            return;
        }

        let i = 0;
        let j = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        let inext = 1;

        // if x2 < x1, x will move left by -1, dx will flip to positive as counter
        if (dx < 0) {
            let inext = -1;
            let dx = -dx;
        }

        // diagonal line
        while ((~(i > dx)) & (~(j > dy))) {
            do Screen.drawPixel(x1 + i, y1 + j);
            if (diff < 0) {
                let i = i + inext;
                let diff = diff + dy;
            } else {
                let j = j + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawHorizontal(int y, int x1, int x2, int n) {
        var int start, end, startMask, endMask, i, current;
        let start = 32 * y + (x1 / 16);
        let end = 32 * y + (x2 / 16);

        // set x1 x2 to x mod 16
        let x1 = x1 - (16 * (x1 / 16));
        let x2 = x2 - (16 * (x2 / 16));

        let i = 0;

        // if short line, x1 x2 in the same memory segment
        if (start = end) {
            let startMask = Screen.mask(start, x1, x2);
            while (i < n) {
                let screen[start] = startMask;
                let start = start + 32;
                let i = i + 1;
            }
            return;
        }

        // if 0 or more memory segment between start and end
        // get start and end mask
        let startMask = Screen.mask(start, x1, 15);
        let endMask = Screen.mask(end, 0, x2);
        
        while (i < n) {
            // write start mask
            let screen[start] = startMask;

            // write 16bit word to the middle segments
            let current = start + 1;
            while (~(current = end)) {
                let screen[current] = color;
                let current = current + 1;
            }

            // write end mask
            let screen[end] = endMask;

            // set start and end to next row
            let start = start + 32;
            let end = end + 32;

            let i = i + 1;
        }

        return;
    }

    function int getBitMask(int start, int end) {
        var int i, bit;
        let i = start;
        let bit = 0;

        while (~(i > end)) {
            let bit = bit + twoToThe[i];
            let i = i + 1;
        }

        return bit;
    }

    function void bitMask(int segment, int bitMask) {
        var int value;
        let value = screen[segment];
        if (color) { let screen[segment] =  value | bitMask; }
        else { let screen[segment] =  value & ~bitMask; }
        return;
    }

    function int mask(int segment, int start, int end) {
        var int mask, i, bit;
        let mask = screen[segment];
        let i = start;
        let bit = 0;

        while (~(i > end)) {
            let bit = bit + twoToThe[i];
            let i = i + 1;
        }
        if (color) { let mask = mask | bit; }
        else { let mask = mask & ~bit; }

        return mask;
    }

    function void drawVertical(int x, int y1, int y2) {
        var int address, value, bit, end;
        let address = 32 * y1 + (x / 16);
        let end = 32 * y2 + (x / 16);

        while (~(address > end)) {
            // let screen[address] = Screen.mask(address, x, x);

            let value = screen[address];

            // set the (x % 16)th bit of value to the current color
            let bit = x - (16 * (x / 16));
            let bit = twoToThe[bit];
    
            if (color) { let value = value | bit; }
            else { let value = value & ~bit; }
    
            let screen[address] = value;

            let address = address + 32;
        }

        // while (~(y1 > y2)) {
        //     do Screen.drawPixel(x, y1);
        //     let y1 = y1 + 1;
        // }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // while (~(x1 > x2)) {
        //     do Screen.drawVertical(x1, y1, y2);
        //     let x1 = x1 + 1;
        // }

        do Screen.drawHorizontal(y1, x1, x2, y2 - y1);

        // while (~(y1 > y2)) {
        //     do Screen.drawHorizontal(y1, x1, x2, 1);
        //     let y1 = y1 + 1;
        // }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, newY, r2;
        let dy = -r;
        let r2 = r * r;
        while (~(dy > r)) {
            let dx = Math.sqrt(r2 - (dy * dy));
            let newY = y + dy;
            do Screen.drawHorizontal(newY, x - dx, x + dx, 1);

            let dy = dy + 1;
        }
        return;
    }
}
