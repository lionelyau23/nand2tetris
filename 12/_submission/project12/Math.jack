// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int qy2;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;
        return;
    }

    // function int get_array(int i) {
    //     return twoToThe[i];
    // }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        else { return x; }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    function boolean bit(int x, int i) {
        // return x & twoToThe[i];
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    //  wrapper function for division
    function int divide(int x, int y) {
        var int result;
        let qy2 = 0;

        // perform positive divison
        let result = Math.rDivide(Math.abs(x), Math.abs(y));

        // set the result's sign
        if (((x > 0) & (y > 0)) | ((x < 0) & (y < 0))) { return result; }
        else { return - result; }
    }

    // // recursive divison with positive x, y
    function int rDivide(int x, int y) {
        var int q, result;

        if ((y > x) | (y < 0)) {
            // do Output.printString("y: ");
            // do Output.printInt(y);
            // do Output.printString(", ");
    
            // do Output.printString("baseCase");
            // do Output.println();

            return 0; 
        }

        let q = Math.divide(x, y + y);

        // do Output.printString("q: ");
        // do Output.printInt(q);
        // do Output.printString(", ");

        // do Output.printString("y: ");
        // do Output.printInt(y);
        // do Output.printString(", ");

        // do Output.printString("2qy: ");
        // do Output.printInt((2 * q * y));
        // do Output.printString(", ");

        // do Output.printString("qy2: ");
        // do Output.printInt(qy2);
        // do Output.printString(", ");

        if ((x - qy2) < y) { 
            return q + q; 
        }
        else { 
            let qy2 = qy2 + y;
            return q + q + 1; 
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, sum;
        let y = 0;
        let i = 7;

        while (i > -1) {
            let sum = y + twoToThe[i];
            if (((sum * sum) < x) | ((sum * sum) = x) & (sum * sum) > 0) {
                let y = sum;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; } 
        else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) { return b; } 
        else { return a; }
    }
}
