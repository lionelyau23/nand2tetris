// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //send ALU output or A-instruction to A register
    Mux16(a=instruction, b=ALUoutA, sel=instruction[15], out=inAreg);

    //A register
    Not(in=instruction[15], out=inA);
    Or(a=inA, b=instruction[5], out=writeA);
    ARegister(in=inAreg, load=writeA, out[0..14]=addressM,
                                    out=ARegOutALU,
                                    out=ARegOutPC);

    //D register and logic
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=ALUoutD, load=writeD, out=inALUx);

    //use A register or incoming M value input from RAM
    Mux16(a=ARegOutALU, b=inM, sel=instruction[12], out=inALUy);

    ALU(x=inALUx, y=inALUy, zx=instruction[11],
                nx=instruction[10],
                zy=instruction[9],
                ny=instruction[8],
                f=instruction[7],
                no=instruction[6],
                out=outM, out=ALUoutA, out=ALUoutD,
                zr=zero, ng=neg);

    //logic for writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    //ALUout is greater than zero
    Not(in=zero, out=notZero);
    Not(in=neg, out=notNeg);
    And(a=notZero, b=notNeg, out=pos);

    //check jumping condition
    And(a=pos, b=instruction[0], out=tpos);
    And(a=zero, b=instruction[1], out=tzero);
    And(a=neg, b=instruction[2], out=tneg);

    Or(a=tpos, b=tzero, out=tor);
    Or(a=tor, b=tneg, out=tjump);

    //dont jump if not C instruction
    And(a=instruction[15], b=tjump, out=jump);

    PC(in=ARegOutPC, load=jump, inc=true, reset=reset, out[0..14]=pc);

}
