class PacmanGame {
    field Grid grid;
    field Character pacman;
    field Character blinky;
    field Character pinky;
    field Character inky;
    field Character clyde;
    field int waitDuration;
    field int extraLives;
    field char key;

    constructor PacmanGame new() {
        let waitDuration = 100;         // smaller number makes the game go faster
        let grid = Grid.new();

        do Setup.loadGrid(grid);

        do Character.setGrid(grid);
        do Character.setStatics(520, 200, 80);        // dotsAtStart, scatterMark, chaseMark, (scatterMark > chaseMark)
        do Character.setDrawLocOffset(2);       // empirical, used to line character images up with the map
        do Character.setImages();

        do Setup.drawInitScreen();

        return this;
    }

    method void play() {
        var boolean won;

        let won = false;
        let extraLives = 0;
        while (extraLives < 5) {
            let extraLives = extraLives + 1;
            do Character.drawExtraLife(extraLives, false);
        }

        while ((extraLives > -1) & (~won)) {
            let won = round();
            if (~won) {
                do Character.drawExtraLife(extraLives, true);
                let extraLives = extraLives - 1;
            }
        }

        do Output.moveCursor(9,27);
        do Output.printString("            ");
        do Output.moveCursor(10,27);
        if (won) { do Output.printString(" YOU WON!!! "); }
        if (~won) { do Output.printString(" GAME OVER! "); }
        do Output.moveCursor(11,27);
        do Output.printString("            ");
        return;
    }

    method boolean round() {
        var boolean dead;
        var char keyTemp;
        var int i;

        let dead = false;

        let pacman = Character.new(28, 23, 4, false, 0);       // new pacman at start location looking right
        let blinky = Character.new(28, 11, 1, true, 1);       // new pacman at start location looking right
        let pinky = Character.new(26, 14, 1, true, 2);       // new pacman at start location looking right
        let inky = Character.new(28, 14, 1, true, 3);       // new pacman at start location looking right
        let clyde = Character.new(30, 14, 1, true, 4);       // new pacman at start location looking right

        do waitForKeypress();

        while (~dead) {
            let keyTemp = Keyboard.keyPressed();
            if (~(keyTemp = 0)) { let key = keyTemp; }

            if (pacman.tickPacman(key)) { return true; }
            let dead = blinky.tickBlinky();
            if (~dead) { let dead = pinky.tickPinky(); }
            if (~dead) { let dead = inky.tickInky(); }
            if (~dead) { let dead = clyde.tickClyde(); }

            do Sys.wait(waitDuration);
        }

        if (extraLives > 0) {
            let i = 0;
            while (i < 4) {
                do Character.drawExtraLife(extraLives, true);
                do Sys.wait(waitDuration*3);
                do Character.drawExtraLife(extraLives, false);
                do Sys.wait(waitDuration*3);
                let i = i + 1;
            }


            do pacman.dispose();
            do blinky.dispose();
            do pinky.dispose();
            do inky.dispose();
            do clyde.dispose();
        }

        return false;
    }


    method void waitForKeypress() {
        while (true) {
            let key = Keyboard.keyPressed();
            if (~(key = 0)) { return; }
        }
        return;
    }

    method void dispose() {
        do pacman.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
